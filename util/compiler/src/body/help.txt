
Компилятор кода.
================

То, что помечено звёздочкой, не реализовано.

Аргументы:
--help - показать эту справку
*--hinting - при компиляции производить анализ исходных файлов и предлагать добавить (убрать) файлы из проекта

Программа принимает в качестве параметра путь к compile.ini.
Имя файла 'compile.ini' упоминается условно - вы можете произвольным образом назвать этот файл. Я, например, называю его как '<название_проекта>.pro'.
В папках с исходниками предполагается наличие файлов __meta__ (если такого файла в папке нет, то компилироваться папка не будет)
compile.ini:
------------
Здесь определяются правила компиляции (строковый идентификатор и обрабатывающая функция(на JavaScript))
Оформляется как NodeJS-модуль:
module.exports = {
    target: 'compiled', // <-- здесь будет формироваться результат компиляции
    file_script_dir: '', //* относительный путь к директории, относительно которой будут указываться пути к скриптам для обработки файлов. Если свойство не указано - пути относительно директории, где находится файл compile.ini.
    file: {
        css:function(srcText){ // <-- типы файлов 'css' будут обрабатываться вот этой функцией. Функция должна вернуть результат в виде строки.
        }
        // вместо функции можно указать путь к скрипту, который должен преобразовать данные в файле, полный путь к которому будет передан единственным параметром.
    },
    dir_script_dir: '', //* относительный путь к директории, относительно которой будут указываться пути к скриптам для обработки директорий. Если свойство не указано - пути относительно директории, где находится файл compile.ini.
    dir: {
        tab_app:function(dirPath, dirName){ // <--передаётся абсолютный путь до папки, содержащей целевую папку, и имя целевой папки. Этот обработчик будет применяться к директориям, помеченным как 'tab_app'.
        }
        // вместо функции можно указать путь к скрипту, который должен преобразовать директорию. Скрипту передаются два параметра - такие, как передавались бы в фунцию (см. выше).
    }
}

__meta__:
---------
Здесь определяются цели компиляции, исходники и указываются идентификаторы обработчиков (из compile.ini).
Оформляется как JSON.
{
    files: [{..},{..}], //<-- Если это свойство есть, то собираем указанные файлы. Если этого свойства нет, то тупо копируем всю директорию.
    dir_proc: ['..','..'], //<-- Перечень обработчиков, которые необходимо применить к результирующей директории. Если нужно сохранить директорию (т.е. результаты компиляции будут в такой же папке, а не положены вместо неё), то свойство должно быть, пусть в массиве и не будет элементов.
    remove: [] //<-- какие файлы и директории (от компиляции поддиректорий) надо удалить. Удалено будет перед запуском обработчиков из dir_proc
}

Формат описания правила компиляции файла (такой объект кладём в массив files):
{
    target: '..',//имя, не путь
    type: ['..','..'],//* обработчики файловые (текстовые идентификаторы из compile.ini), которые нужно применить (постобработка, после формирования из составляющих)
    source:{
        list: ['1.js', '2.js'],
        template: '..', //* путь до файла с шаблоном
        types:{
            '1.js': ['..','..'] // обработчики файловые (текстовые идентификаторы из compile.ini), которые нужно применить (предобработка, перед вставкой в целевой файл)
        }
    }
}
// * - необязательное свойство

При написании шаблона как ссылаться на файлы-исходники:
{%% 1.js %%}
1.js - имя файла (не забудьте его прописать в __meta__ !). Между '%' и именем файла обязательно должен быть один пробел.

Простейший файл __meta__:
-------------------------
{
    "dir_proc": []
}
Что он делает - сохраняет директорию как есть. Если файл __meta__ отсутсвует или в нём нет свойства 'dir_proc', такой папки в результатах компиляции не будет.

См. также:
    - https://www.npmjs.com/package/node-minify
    - var stripComments = require('strip-comments');data = stripComments(data);
Автор: Васильев Б.П.

